version: '3.8'

services:

  frontend:
    image: sermalenk/skypro-front:lesson-38
    ports:
      - "80:80"
    depends_on:
      - db
      - api
    networks:
      - todolist_front_network


  api:
    image: $IMAGE_TAG:${GITHUB_REF_NAME}-${GITHUB_RUN_ID}
    restart: always
    environment:
      DB_HOST: ${DB_HOST}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      SECRET_KEY: ${SECRET_KEY}
    depends_on:
      migrations:
        condition: service_completed_successfully
      db:
        condition: service_healthy
    networks:
      - todolist_front_network
      - todolist_db_network

  migrations:
    image: $IMAGE_TAG:${GITHUB_REF_NAME}-${GITHUB_RUN_ID}
    restart: always
    environment:
      DB_HOST: ${DB_HOST}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      SECRET_KEY: ${SECRET_KEY}
    depends_on:
      db:
        condition: service_healthy
    command: >
      sh -c "python manage.py makemigrations && 
      python manage.py migrate"
    networks:
      - todolist_db_network


  db:
    image: postgres:12.4-alpine
    volumes:
      - postgres_todolist:/var/lib/postgresql/data
    environment:
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
    restart: always
    networks:
      - todolist_db_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres_todolist:

networks:
  todolist_db_network:
  todolist_front_network:




